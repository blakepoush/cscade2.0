{
  "_from": "connect-pg-simple",
  "_id": "connect-pg-simple@5.0.0",
  "_inBundle": false,
  "_integrity": "sha512-WZ7xkN+qe5bbDLgZ1L9GxnSbr155cJHmfNRzVR5hBvqio7Pg/vuH7Cf8lPUSFClQjtybYSejUqyO54sYt4cg+w==",
  "_location": "/connect-pg-simple",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "connect-pg-simple",
    "fetchSpec": "latest",
    "name": "connect-pg-simple",
    "raw": "connect-pg-simple",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/connect-pg-simple/-/connect-pg-simple-5.0.0.tgz",
  "_shasum": "f0304a1ee4e1e1a69e7783123cbcbf68d2155a19",
  "_spec": "connect-pg-simple",
  "_where": "/Users/SamReagan/Desktop/cscade2.0",
  "author": {
    "email": "pelle@kodfabrik.se",
    "name": "Pelle Wessman",
    "url": "http://kodfabrik.se/"
  },
  "bugs": {
    "url": "https://github.com/voxpelli/node-connect-pg-simple/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "pg": "^7.4.3"
  },
  "deprecated": false,
  "description": "A simple, minimal PostgreSQL session store for Connect/Express",
  "devDependencies": {
    "chai": "4.1.2",
    "chai-as-promised": "7.1.1",
    "cookie-signature": "1.0.6",
    "cookiejar": "2.1.2",
    "coveralls": "2.13.3",
    "denodeify": "1.2.1",
    "dependency-check": "3.1.0",
    "dotenv": "6.0.0",
    "escape-string-regexp": "1.0.5",
    "eslint": "3.19.0",
    "eslint-config-semistandard": "11.0.0",
    "eslint-config-standard": "10.2.1",
    "eslint-plugin-import": "2.12.0",
    "eslint-plugin-node": "4.2.3",
    "eslint-plugin-promise": "3.8.0",
    "eslint-plugin-standard": "3.1.0",
    "express": "4.16.3",
    "express-session": "1.15.6",
    "husky": "0.14.3",
    "installed-check": "2.1.3",
    "istanbul": "0.4.5",
    "mocha": "3.5.3",
    "pg-promise": "5.9.7",
    "proxyquire": "1.8.0",
    "sinon": "3.3.0",
    "sinon-chai": "2.14.0",
    "supertest": "3.1.0"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "homepage": "https://github.com/voxpelli/node-connect-pg-simple#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "connect-pg-simple",
  "optionalDependencies": {},
  "readme": "# Connect PG Simple\n\nA simple, minimal PostgreSQL session store for Express/Connect\n\n[![Build Status](https://travis-ci.org/voxpelli/node-connect-pg-simple.svg?branch=master)](https://travis-ci.org/voxpelli/node-connect-pg-simple)\n[![Coverage Status](https://coveralls.io/repos/voxpelli/node-connect-pg-simple/badge.svg)](https://coveralls.io/r/voxpelli/node-connect-pg-simple)\n[![dependencies Status](https://david-dm.org/voxpelli/node-connect-pg-simple/status.svg)](https://david-dm.org/voxpelli/node-connect-pg-simple)\n[![Known Vulnerabilities](https://snyk.io/test/github/voxpelli/node-connect-pg-simple/badge.svg?targetFile=package.json)](https://snyk.io/test/github/voxpelli/node-connect-pg-simple?targetFile=package.json)\n[![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat)](https://github.com/Flet/semistandard)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fvoxpelli%2Fnode-connect-pg-simple.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fvoxpelli%2Fnode-connect-pg-simple?ref=badge_shield)\n\n## Installation\n\n```bash\nnpm install connect-pg-simple\n```\n\nOnce npm installed the module, you need to create the **session** table in your database. For that you can use the [table.sql](table.sql) file provided with the module:\n\n```bash\npsql mydatabase < node_modules/connect-pg-simple/table.sql\n```\n\nOr simply play the file via a GUI, like the pgAdminIII queries tool.\n\n## Usage\n\nExamples are based on Express 4.\n\nSimple example:\n\n```javascript\nvar session = require('express-session');\n\napp.use(session({\n  store: new (require('connect-pg-simple')(session))(),\n  secret: process.env.FOO_COOKIE_SECRET,\n  resave: false,\n  cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 } // 30 days\n}));\n```\n\nAdvanced example showing some custom options:\n\n```javascript\nvar pg = require('pg')\n  , session = require('express-session')\n  , pgSession = require('connect-pg-simple')(session);\n\nvar pgPool = new pg.Pool({\n    // Insert pool options here\n});\n\napp.use(session({\n  store: new pgSession({\n    pool : pgPool,                // Connection pool\n    tableName : 'user_sessions'   // Use another table-name than the default \"session\" one\n  }),\n  secret: process.env.FOO_COOKIE_SECRET,\n  resave: false,\n  cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 } // 30 days\n}));\n```\n\nExpress 3 (and similar for Connect):\n\n```javascript\nvar express = require('express');\n\napp.use(session({\n  store: new (require('connect-pg-simple')(express.session))(),\n  secret: process.env.FOO_COOKIE_SECRET,\n  cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 } // 30 days\n}));\n```\n\n## Advanced options\n\n* **pool** - Recommended. Connection pool object (compatible with [pg.Pool](https://github.com/brianc/node-pg-pool)) for the underlying database module. The **conString** option is ignored if this option is specified.\n* **pgPromise** - Existing instance of `pg-promise` to be used for DB communications. The **conString** option is ignored if this option is specified.\n* **conString** - If you don't specify a pool object, use this option or `conObject` to specify a PostgreSQL connection [string](https://github.com/brianc/node-postgres/wiki/Client#new-clientstring-url-client) and this module will create a new pool for you. If the connection string is in the `DATABASE_URL` environment variable (as you do by default on eg. Heroku) – then this module fallback to that if this option is not specified.\n* **conObject** - If you don't specify a pool object, use this option or `conString` to specify a PostgreSQL Pool connection [object](https://github.com/brianc/node-postgres#pooling-example) and this module will create a new pool for you.\n* **ttl** - the time to live for the session in the database – specified in seconds. Defaults to the cookie maxAge if the cookie has a maxAge defined and otherwise defaults to one day.\n* **schemaName** - if your session table is in another Postgres schema than the default (it normally isn't), then you can specify that here.\n* **tableName** - if your session table is named something else than `session`, then you can specify that here.\n* **pruneSessionInterval** - sets the delay in seconds at which expired sessions are pruned from the database. Default is `60` seconds. If set to `false` no automatic pruning will happen. Automatic pruning weill happen `pruneSessionInterval` seconds after the last pruning – manual or automatic.\n* **errorLog** – the method used to log errors in those cases where an error can't be returned to a callback. Defaults to `console.error()`, but can be useful to override if one eg. uses [Bunyan](https://github.com/trentm/node-bunyan) for logging.\n\n## Useful methods\n\n* **close()** – if this module used its own database module to connect to Postgres, then this will shut that connection down to allow a graceful shutdown.\n* **pruneSessions([callback(err)])** – will prune old sessions. Only really needed to be called if **pruneSessionInterval** has been set to `false` – which can be useful if one wants improved control of the pruning.\n\n\n## License\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fvoxpelli%2Fnode-connect-pg-simple.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fvoxpelli%2Fnode-connect-pg-simple?ref=badge_large)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/voxpelli/node-connect-pg-simple.git"
  },
  "scripts": {
    "dependency-check": "JS_FILES=\"*.js test/*.js test/*/*.js\" && dependency-check . $JS_FILES && dependency-check . $JS_FILES --unused --no-dev",
    "mocha": "NODE_ENV=test istanbul cover _mocha -- -u exports -R spec test/*.spec.js",
    "mocha-all": "NODE_ENV=test istanbul cover _mocha -- -u exports -R spec test/*/*.spec.js test/*.spec.js",
    "prepush": "npm test",
    "test": "installed-check -e && eslint . && npm run --silent dependency-check && npm run --silent mocha-all",
    "test-light": "installed-check -e && eslint . && npm run --silent dependency-check && npm run --silent mocha"
  },
  "url": "http://github.com/voxpelli/node-connect-pg-simple",
  "version": "5.0.0"
}
