{
  "_from": "sqlite",
  "_id": "sqlite@3.0.2",
  "_inBundle": false,
  "_integrity": "sha512-catQuNRzqiLcMBLKM4oSM+Toim9yrHKhsrh2iOgIvyOvKVOqXmOmOZpH3gnAecGCkqQ+DjbPCJczpJNnFzYq6Q==",
  "_location": "/sqlite",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "sqlite",
    "fetchSpec": "latest",
    "name": "sqlite",
    "raw": "sqlite",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sqlite/-/sqlite-3.0.2.tgz",
  "_shasum": "5589e980a070b39e0b8810d723485285a87b9f2c",
  "_spec": "sqlite",
  "_where": "/Users/SamReagan/Desktop/cscade2.0",
  "author": {
    "email": "hello@kriasoft.com",
    "name": "Kriasoft",
    "url": "https://www.kriasoft.com"
  },
  "bugs": {
    "url": "https://github.com/kriasoft/node-sqlite/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Konstantin Tarkus",
      "email": "hello@tarkus.me",
      "url": "https://twitter.com/koistya"
    },
    {
      "name": "Theo Gravity",
      "email": "theo@suteki.nu",
      "url": "https://www.npmjs.com/~theo.gravity"
    }
  ],
  "dependencies": {
    "sql-template-strings": "^2.2.2",
    "sqlite3": "^4.0.0"
  },
  "deprecated": false,
  "description": "SQLite client for Node.js applications with SQL-based migrations API",
  "devDependencies": {},
  "homepage": "https://github.com/kriasoft/node-sqlite#readme",
  "jsnext:main": "main.mjs",
  "keywords": [
    "api",
    "async",
    "babel",
    "database",
    "db",
    "es6",
    "migrate",
    "migration",
    "migrations",
    "migrator",
    "node",
    "node5",
    "promise",
    "promises",
    "seed",
    "seeder",
    "seeds",
    "sql",
    "sqlite"
  ],
  "license": "MIT",
  "main": "main.js",
  "name": "sqlite",
  "optionalDependencies": {
    "sql-template-strings": "^2.2.2"
  },
  "readme": "## SQLite Client for Node.js Apps\n\n[![NPM version](http://img.shields.io/npm/v/sqlite.svg?style=flat-square)](https://www.npmjs.com/package/sqlite)\n[![NPM downloads](http://img.shields.io/npm/dm/sqlite.svg?style=flat-square)](https://www.npmjs.com/package/sqlite)\n[![Build Status](http://img.shields.io/travis/kriasoft/node-sqlite/master.svg?style=flat-square)](https://travis-ci.org/kriasoft/node-sqlite)\n[![Dependency Status](http://img.shields.io/david/kriasoft/node-sqlite.svg?style=flat-square)](https://david-dm.org/kriasoft/node-sqlite)\n[![Online Chat](http://img.shields.io/badge/chat-%23node--sqlite_on_Gitter-blue.svg?style=flat-square)](https://gitter.im/kriasoft/node-sqlite)\n\n> A wrapper library that adds ES6 promises and SQL-based migrations API to\n> [sqlite3](https://github.com/mapbox/node-sqlite3/) ([docs](https://github.com/mapbox/node-sqlite3/wiki)).\n\n---\n\n<p align=\"center\"><b>ðŸ”¥ Want to strengthen your core JavaScript skills and master ES6?</b><br>I would personally recommend this awesome <a href=\"https://es6.io/friend/konstantin\">ES6 course</a> by Wes Bos.</p>\n\n---\n\n\n### How to Install\n\n```sh\n$ npm install sqlite --save\n```\n\n\n### How to Use\n\n**NOTE**: For Node.js v5 and below use `var db = require('sqlite/legacy');`.\n\nThis module has the same API as the original `sqlite3` library ([docs](https://github.com/mapbox/node-sqlite3/wiki/API)),\nexcept that all its API methods return ES6 Promises and do not accept callback arguments.\n\nBelow is an example of how to use it with [Node.js](https://nodejs.org), [Express](http://expressjs.com/starter/hello-world.html) and [Babel](http://babeljs.io/):\n\n```js\nimport express from 'express';\nimport Promise from 'bluebird';\nimport sqlite from 'sqlite';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\nconst dbPromise = sqlite.open('./database.sqlite', { Promise });\n\napp.get('/post/:id', async (req, res, next) => {\n  try {\n    const db = await dbPromise;\n    const [post, categories] = await Promise.all([\n      db.get('SELECT * FROM Post WHERE id = ?', req.params.id),\n      db.all('SELECT * FROM Category')\n    ]);\n    res.render('post', { post, categories });\n  } catch (err) {\n    next(err);\n  }\n});\n\napp.listen(port);\n```\n\n### ES6 tagged template strings\n\nThis module is compatible with [sql-template-strings](https://www.npmjs.com/package/sql-template-strings).\n\n```js\nimport SQL from 'sql-template-strings';\nimport sqlite from 'sqlite';\n\nconst db = await sqlite.open('./database.sqlite');\n\nconst book = 'harry potter';\nconst author = 'J. K. Rowling';\n\nconst data = await db.all(SQL`SELECT author FROM books WHERE name = ${book} AND author = ${author}`);\n```\n\n### Cached DB Driver\n\nIf you want to enable the [database object cache](https://github.com/mapbox/node-sqlite3/wiki/Caching)\n\n```js\nsqlite.open('./database.sqlite', { cached: true })\n```\n\n### Migrations\n\nThis module comes with a lightweight migrations API that works with [SQL-based migration files](https://github.com/kriasoft/node-sqlite/tree/master/migrations)\nas the following example demonstrates:\n\n##### `migrations/001-initial-schema.sql`\n\n```sql\n-- Up\nCREATE TABLE Category (id INTEGER PRIMARY KEY, name TEXT);\nCREATE TABLE Post (id INTEGER PRIMARY KEY, categoryId INTEGER, title TEXT,\n  CONSTRAINT Post_fk_categoryId FOREIGN KEY (categoryId)\n    REFERENCES Category (id) ON UPDATE CASCADE ON DELETE CASCADE);\nINSERT INTO Category (id, name) VALUES (1, 'Business');\nINSERT INTO Category (id, name) VALUES (2, 'Technology');\n\n-- Down\nDROP TABLE Category\nDROP TABLE Post;\n```\n\n##### `migrations/002-missing-index.sql`\n\n```sql\n-- Up\nCREATE INDEX Post_ix_categoryId ON Post (categoryId);\n\n-- Down\nDROP INDEX Post_ix_categoryId;\n```\n\n##### `app.js` (Node.js/Express)\n\n```js\nimport express from 'express';\nimport Promise from 'bluebird';\nimport sqlite from 'sqlite';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\nconst dbPromise = Promise.resolve()\n  .then(() => sqlite.open('./database.sqlite', { Promise }))\n  .then(db => db.migrate({ force: 'last' }));\n\napp.use(/* app routes */);\n\napp.listen(port);\n```\n\n**NOTE**: For the development environment, while working on the database schema, you may want to set\n`force: 'last'` (default `false`) that will force the migration API to rollback and re-apply the\nlatest migration over again each time when Node.js app launches.\n\n\n### Multiple Connections\n\nThe `open` method resolves to the db instance which can be used in order to reference multiple open databases.\n\n#### ES6\n\n```js\nimport sqlite from 'sqlite';\n\nPromise.all([\n  sqlite.open('./main.sqlite', { Promise }),\n  sqlite.open('./users.sqlite', { Promise })\n]).then(function([mainDb, usersDb]){\n  ...\n});\n```\n\n#### ES7+ Async/Await\n\n```js\nimport sqlite from 'sqlite';\n\nasync function main() {\n  const [mainDb, usersDb] = await Promise.all([\n    sqlite.open('./main.sqlite', { Promise }),\n    sqlite.open('./users.sqlite', { Promise })\n  ]);\n  ...\n}\nmain();\n```\n\n### References\n\n* [Using SQLite with Node.js for Rapid Prototyping](https://medium.com/@tarkus/node-js-and-sqlite-for-rapid-prototyping-bc9cf1f26f10) on Medium.com\n* [SQLite Documentation](https://www.sqlite.org/docs.html), e.g. [SQL Syntax](https://www.sqlite.org/lang.html), [Data Types](https://www.sqlite.org/datatype3.html) etc. on SQLite.org\n* ES6 tagged [sql-template-strings](https://www.npmjs.com/package/sql-template-strings).\n\n\n### Related Projects\n\n* [Node.js API Starter](https://github.com/kriasoft/nodejs-api-starter) â€” Data API server boilerplate (Node.js, PostgreSQL, Redis, Passport.js and GraphQL)\n* [React Starter Kit](https://github.com/kriasoft/react-starter-kit) â€” Isomorphic web app boilerplate (Node.js/Express, React.js, GraphQL)\n* [ASP.NET Core Starter Kit](https://github.com/kriasoft/aspnet-starter-kit) â€” Single-page app boilerplate (ASP.NET Core, React.js, Web API)\n* [Babel Starter Kit](https://github.com/kriasoft/babel-starter-kit) â€” JavaScript library boilerplate (ES2015, Babel, Rollup)\n* [Membership Database](https://github.com/membership/membership.db) â€” SQL database boilerplate for web app users, roles and auth tokens\n\n\n### Support\n\n* Join [#node-sqlite](https://gitter.im/kriasoft/node-sqlite) chat room on Gitter to stay up to date regarding the project\n* Join [#sqlite](https://webchat.freenode.net/?channels=sql,sqlite) IRC chat room on Freenode about general discussion about SQLite\n\n\n### License\n\nThe MIT License Â© 2015-present Kriasoft. All rights reserved.\n\n---\nMade with â™¥ by [Konstantin Tarkus](https://github.com/koistya) ([@koistya](https://twitter.com/koistya)), [Theo Gravity](https://github.com/theogravity) and [contributors](https://github.com/kriasoft/node-sqlite/graphs/contributors)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kriasoft/node-sqlite.git"
  },
  "types": "main.d.ts",
  "version": "3.0.2"
}
